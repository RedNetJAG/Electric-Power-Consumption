vim
q()
q()
library(xlsx)
library(rJava)
q()
Db <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
?dbConnect
install.packages('RMySQL',type='source')
library(RMySQL)
install.packages(c("Matrix", "mgcv", "Rcpp"))
install.packages(c("'RMySQL'", "type='source'"))
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
export PKG_CPPFLAGS="-I<include-dir>"
export MYSQL_INC="D:/Programs/MySQL/MySQL Server 5.6/"
export MYSQL_INC=D:/Programs/MySQL/MySQL Server 5.6/
export
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created=h5createFile("example.h5")
created
created<-h5createGroup("example.h5", "foo")
created
h5ls("example.h5")
created<-h5createGroup("example.h5", "baa")
created<-h5createGroup("example.h5", "foo/baa")
h5ls("example.h5")
a<-matrix(1:10, nr=5, nc=2)
a
b<-array(seq(0.1, 2.0, by=0.1), dim=c(5,2,2))
b
h5write(a, "example.h5", "foo/a")
h5ls("example.h5")
attr(b, "scale") <- "liter"
h5write(b, "example.h5", "foo/baa/b")
h5ls("example.h5")
df<-data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/a")
readA
h5write(c(12,13,14),"example.h5","foo/a",index=list(1:3,1))
h5ls("example.h5")
h5read("example.h5","foo/a")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlcode <- readLines(con)
close(con)
htmlcode
library(XML)
url <- http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
content <- content(html,as="text")
html <- GET(url)
content <- content(html,as="text")
parsedHtml <- htmlParse(content, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg1 = GET("http://httpbin.org/basic-auth/user/passwd", authenticate("user","passwd"))
pg1
names(pg1)
install.packages("RMySQL", type"source")
install.packages("RMySQL", type="source")
Sys.getenv('MYSQL_HOME')
q()
install.packages("RMySQL", type="source")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;")
dbDisconnect(ucscDb)
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
hg19
dbDisconnect(hg19)
length(hg19)
length(allTables)
allTables[12, 45]
allTables[1:5]
is.vector(allTables)
dbListFields(hg19, "HInvGeneMrna")
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
dbListFields(hg19, "HInvGeneMrna")
dbGetQuery(hg19, "select count(*) from HInvGeneMrna")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
?fetch
affyMisSmall <- fetch(query,n=10)
affyMisSmall
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
library(XML)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv""
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
acs <- getURL(url)
library(RCurl)
acs <- getURL(url)
acs <- read.csv(url)
acs
sqldf("select pwgtp1 from acs where AGEP < 50")
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select unique * from acs")
acs <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
acs <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
sqldf("select unique * from acs")
unique(acs$AGEP)
acs <- read.csv(url)
url
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url ("http://biostat.jhsph.edu/~jleek/contact.html")
library(XML)
library(httr)
html <- GET(url)
names(html)
head(html)
html <- htmlTreeParse(url, useInternalNodes=T)
html
close(con)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
library(Table)
library(data.table)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- readLine(con)
html <- readLines(con)
close(con)
nchar(htlm[10])
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
html
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
?readLines
file <- readLines(url)
head(file)
names(file)
file <- read.table(url)
file <- read.table(url)
file <- read.table(file)
f <- read.table(file)
?download.file
myurl <- download.file(url=myurl, destfile="localcopy.for")
w <- c(1, 9, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3, 5, 4, 1, 3)
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
colNames <- c("filler", "week", "filler", "sstNino12", "filler", "sstaNino12", "filler", "sstNino3", "filler", "sstaNino3", "filler", "sstNino34", "filler", "sstaNino34", "filler", "sstNino4", "filler", "sstaNino4")
d <- read.fwf(url, w, header=FALSE, skip=4, col.names=colNames)
d <- d[, grep("^[^filler]", names(d))]
sum(d[, 4])
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- reaLines(con)
html <- readLines(con)
close(con)
html[10]
?nchar
nchar(html[10], type ="chars")
nchar(html[20], type ="chars")
nchar(html[30], type ="chars")
nchar(html[100], type ="chars")
library(reshape2)
library(plyr)
## Read data from files
features = read.table("./Dataset/features.txt")
activityLabels = read.table("./Dataset/activity_labels.txt")
subjectTrain = read.table("./Dataset/train/subject_train.txt")
xTrain = read.table("./Dataset/train/x_train.txt")
yTrain = read.table("./Dataset/train/y_train.txt")
subjectTest = read.table("./Dataset/test/subject_test.txt")
xTest = read.table("./Dataset/test/x_test.txt")
yTest = read.table("./Dataset/test/y_test.txt")
## Labels the columns
colnames(activityLabels) <- c("activityId", "activityType")
colnames(subjectTrain) <- "subjectId"
colnames(subjectTest) <- "subjectId"
colnames(yTrain) <- "activityId"
colnames(yTest) <- "activityId"
colnames(xTrain) <- features$V2
colnames(xTest) <- features$V2
## Merges de trainig dataset and the test dataset
Training <- cbind(subjectTrain, xTrain, yTrain)
Test <- cbind(subjectTest, xTest, yTest)
## Result for 1.Merges the training and the test sets to create one dataset
TrainingTest <- rbind(Training, Test)
## 2.Extracts only the measurements on the mean and standard deviation
## for each measurement
## extract the colnames to parse them
columnas <- colnames(TrainingTest)
colextract <- grepl("-mean\\(", columnas) | grepl("-std", columnas) | grepl("subjectId", columnas) | grepl("activityId", columnas)
## Result for 2: MeanStd
MeanStd <- TrainingTest[colextract]
## 3.Uses descriptive activity names to name the activities in the data set
TrainingTest <- join(TrainingTest,activityLabels,by="activityId",match="first"")
install.packages(c("boot", "class", "cluster", "codetools", "data.table", "DBI", "devtools", "gsubfn", "Hmisc", "httr", "jsonlite", "KernSmooth", "labeling", "MASS", "mgcv", "quantmod", "Rcpp", "RCurl", "swirl", "testthat", "xlsx", "xlsxjars"))
setwd("F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home")
colors()
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot (x, y)
z <- rnorm(100)
plot (x, z)
z <- rnorm(100)
plot (x, y)
par(mar = c(2, 2, 2, 2))
plot (x, y)
par(mar = c(4, 4, 2, 2))
plot (x, y)
plot (x, y, pch = 20)
plot (x, y, pch = 2)
plot (x, y, pch = 19)
plot (x, y, pch = 4)
plot (x, y, pch = 3)
example(points)
plot (x, y, pch = 20)
y <- rnorm(100)
x <- rnorm(100)
plot (x, y, pch = 20)
title("Scatterplot")
text (-2, -2, "Label")
legend("topleft", legend = "Data", pch = 20)
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par("mar")
par( mar = c(2, 2, 1, 1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(1, 2))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
par(mfrow = c(1, 1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
?gl
g <- gl(2, 50, labels = c("Male", "Female"))
str(g)
plot(x, y)
plot(x, y, type = "n")
points(x[g == "Male"])
points(x[g == "Male"], y[g == "Male"])
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "red")
points(x[g == "Male"], y[g == "Male"], col = "green", pch = 19)
setwd("F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home/exdata_data_household_power_consumption")
data <- read.csv("..\exdata_data_household_power_consumption\data.txt", colClasses="character")
setwd("F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home/Electric-Power-Consumption")
setwd("F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home/Electric-Power-Consumption")
data <- read.csv("..\exdata_data_household_power_consumption\data.txt", colClasses="character")
data <- read.csv("../exdata_data_household_power_consumption/data.txt", colClasses="character")
head(data)
View(data)
ls()
rm(ls())
data <- read.csv("../exdata_data_household_power_consumption/data.txt")
data <- read.csv("../exdata_data_household_power_consumption/data.txt", sep=';', na.strings="?", header=T)
View(data)
subdata <- subset(data, subset=(Date >= "01-02-2007" & Date <= "02-02-2007"))
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
View(subdata)
View(data)
subdata <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
View(subdata)
rm(data)
hist(Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab="Frequency", col = "Red")
hist(subdata$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab="Frequency", col = "Red")
hist(subdata$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab="Frequency", col = "Red", ylim = c(0, 1200))
hist(subdata$Global_active_power, main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab="Frequency", col = "Red", ylim = c(0, 1200))
source('F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home/Electric-Power-Consumption/plot1.R')
source('F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home/Electric-Power-Consumption/plot1.R')
source('F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home/Electric-Power-Consumption/plot1.R')
?plot
data <- read.csv("../exdata_data_household_power_consumption/data.txt", sep=';', na.strings="?", header=T)
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
subdata <- subset(data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(data)
View(subdata)
?as.POSIXct
DateTime <- paste(subdata$Date, subdata$Time)
subdata$DateTime <- as.POSIXct(DateTime)
View(subdata)
plot(subdata$Datetime, subdata$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="")
plot(subdata$DateTime, subdata$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xlab="")
source('~/.active-rstudio-document')
source('F:/Johns Hopkins U - Ciencia de Datos/4 - Exploratory Data Analysis/Home/Electric-Power-Consumption/plot2.R')
